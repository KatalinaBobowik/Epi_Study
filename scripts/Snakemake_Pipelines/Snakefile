configfile: "config.yaml"

sample=config["samples"]

rule all:
	input:
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.fastq.gz", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.fastq.gz", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.unpaired.fastq.gz", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.unpaired.fastq.gz", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_1_fastqc.html", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_2_fastqc.html", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_1_fastqc.zip", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_2_fastqc.zip", sample=config["samples"]),
		directory("/scratch/punim0586/kat/101BPIndonesianGenome"),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Aligned.sortedByCoord.out.bam", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate1", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate2", sample=config["samples"]),
		directory("/scratch/punim0586/kat/101BPIndo_genome_TE_ensembl"),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Aligned.sortedByCoord.out.bam", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate1", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate2", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.res", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.mapstat", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.csv", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.html", sample=config["samples"]),
		expand("/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.tsv", sample=config["samples"])

rule trimmomatic_pe:
	input:
		r1="/scratch/punim0586/kat/raw_data_copied/{sample}_1.fastq.gz",
		r2="/scratch/punim0586/kat/raw_data_copied/{sample}_2.fastq.gz"
	output:
		r1="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.fastq.gz",
		r2="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.fastq.gz",
		# reads where trimming entirely removed the mate
		r1_unpaired="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.unpaired.fastq.gz",
		r2_unpaired="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.unpaired.fastq.gz"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/trimmomatic/{sample}.log"
	threads: 12
	shell:
		"module load web_proxy; module load Java; java -jar /data/cephfs/punim0586/kbobowik/bin/Trimmomatic-0.36/trimmomatic-0.36.jar PE "
		"-threads {threads} -phred33 {input.r1} {input.r2} {output.r1} "
		"{output.r1_unpaired} {output.r2} {output.r2_unpaired} LEADING:20 TRAILING:20 MINLEN:90 -trimlog {log}"

rule fastqc:
	input:
		["/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.fastq.gz", "/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.fastq.gz"]
	output:
		"/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_1_fastqc.html",
		"/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_2_fastqc.html",
		"/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_1_fastqc.zip",
		"/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/{sample}_2_fastqc.zip"
	conda:
		"envs/QC.yaml"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/fastqc/{sample}.log"
	threads: 12
	shell:
		"module load web_proxy; fastqc {input} -t {threads} --extract --outdir=/scratch/punim0586/kat/101BPIndonesianSamples/qc/fastqc/ &> {log}"

rule star_index:
	input:
		fasta="/data/cephfs/punim0586/shared/genomes/hg38/Homo_sapiens.GRCh38.p10.ensemblv90.dna.primary_assembly.fa",
		gtf="/data/cephfs/punim0586/shared/genomes/hg38/GTF_annotation/Homo_sapiens.GRCh38.90.gtf"
	output:
		directory("/scratch/punim0586/kat/101BPIndonesianGenome")
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/star_index/genome.log"
	threads: 12
	shell:
		"module load web_proxy; module load STAR; mkdir /scratch/punim0586/kat/101BPIndonesianGenome; STAR --runMode genomeGenerate "
		"--genomeDir /scratch/punim0586/kat/101BPIndonesianGenome "
		"--genomeFastaFiles {input.fasta} "
		"--sjdbGTFfile {input.gtf} "
		"--sjdbOverhang 100 "
		"--runThreadN {threads} &> {log}"

rule star_pe_twopassmode:
	input:
		f1="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_1.fastq.gz",
		f2="/scratch/punim0586/kat/101BPIndonesianSamplesTrimmed/{sample}_2.fastq.gz",
		dir=directory("/scratch/punim0586/kat/101BPIndonesianGenome"),
		gtf="/data/cephfs/punim0586/shared/genomes/hg38/GTF_annotation/Homo_sapiens.GRCh38.90.gtf"
	output:
		"/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Aligned.sortedByCoord.out.bam",
		"/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate1",
		"/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate2"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/star/{sample}.log"
	threads: 12
	shell:
		# unfortunately I have no better way of doing it- define sample name then use that as dirname
		"module load web_proxy; module load STAR; x=`basename {input.f1} _1.fastq.gz`; STAR --genomeDir {input.dir} "
		"--readFilesIn {input.f1} {input.f2} "
		"--runThreadN {threads} --sjdbOverhang 100 "
		"--readFilesCommand zcat "
		"--outFileNamePrefix /scratch/punim0586/kat/101BPIndonesianSamplesMapped/${{x}}_ "
		"--outSAMunmapped Within "
		"--outReadsUnmapped Fastx "
		"--twopassMode Basic "
		"--sjdbGTFfile {input.gtf} "
		"--outSAMtype BAM SortedByCoordinate &> {log}"

rule star_TEindex:
	input:
		fasta="/data/cephfs/punim0586/kbobowik/genome/TEGenome.fa",
		gtf="/data/cephfs/punim0586/kbobowik/genome/GRCh38_Ensembl_rmsk_TE.gtf"
	output:
		directory("/scratch/punim0586/kat/101BPIndo_genome_TE_ensembl")
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/star_TEindex/genome.log"
	threads: 12
	shell:
		"module load web_proxy; module load STAR; mkdir /scratch/punim0586/kat/101BPIndo_genome_TE_ensembl; STAR --runMode genomeGenerate "
		"--genomeDir /scratch/punim0586/kat/101BPIndo_genome_TE_ensembl "
		"--genomeFastaFiles {input.fasta} "
		"--sjdbGTFfile {input.gtf} "
		"--sjdbOverhang 100 "
		"--runThreadN {threads} "
		# this parameter is necessary so that an error doesn't occur about memory usage
		"--genomeChrBinNbits 9 &> {log}"

rule star_pe_twopassmodeTE:
	input:
		f1="/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate1",
		f2="/scratch/punim0586/kat/101BPIndonesianSamplesMapped/{sample}_Unmapped.out.mate2",
		dir=directory("/scratch/punim0586/kat/101BPIndo_genome_TE_ensembl"),
		gtf="/data/cephfs/punim0586/kbobowik/genome/GRCh38_Ensembl_rmsk_TE.gtf"
	output:
		"/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Aligned.sortedByCoord.out.bam",
		"/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate1",
		"/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate2"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/starTE/{sample}.log"
	threads: 12
	shell:
		"module load web_proxy; module load STAR; STAR --genomeDir {input.dir} "
		"--readFilesIn {input.f1} {input.f2} "
		"--runThreadN {threads} --sjdbOverhang 100 "
		"--outFileNamePrefix /scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{wildcards.sample}_ "
		"--outReadsUnmapped Fastx "
		"--twopassMode Basic "
		"--sjdbGTFfile {input.gtf} "
		"--outSAMtype BAM SortedByCoordinate "
		"--winAnchorMultimapNmax 100 "
		"--outFilterMultimapNmax 100 "
		"--outFilterScoreMinOverLread 0.4 "
		"--outFilterMatchNminOverLread 0.4 "
		"--chimSegmentMin 100 &> {log}"

rule KMA_TE:
	input:
		f1="/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate1",
		f2="/scratch/punim0586/kat/101BPIndonesianSamplesMappedTE/{sample}_Unmapped.out.mate2"
	output:
		"/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.res",
		"/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.mapstat"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/KMA_TE/{sample}.log"
	shell:
		"/data/cephfs/punim0586/kbobowik/CCmetagen/kma/kma "
		"-ipe {input.f1} {input.f2} " # -ipe Inputfile(s), paired end
		"-o /scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{wildcards.sample} " # -o output
		"-ef " # -ef used to calculate abundance in reads per million (RPM)
		"-t_db /scratch/punim0586/kat/ncbi_nt_no_env_11jun2019 " # -t_db database;
		"-t 12 -1t1 " # -t threads; -1t1 One read to one template, no splicing performed
		"-mem_mode " # -mem_mode *.index and *.seq are not loaded into memory, which enables one to map against larger databases
		"-apm f " # -apm Paired end method, “f” force paired reads to pair
		"-and &> {log}" # -and Both mrs and p_value thresholds has to reached to in order to report a template hit

rule CCMetagen_TE:
	input:
		resultFile="/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.res",
		mapstatFile="/scratch/punim0586/kat/101BPIndonesianSamplesKMA_TE/{sample}.mapstat"
	output:
		"/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.csv",
		"/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.html",
		"/scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{sample}.tsv"
	log:
		"/scratch/punim0586/kat/101BPIndonesianSamples/logs/CCMetagen_TE/{sample}.log"
	conda:
		"envs/CCMetagen.yaml"
	shell:
		"(python3.7 /data/cephfs/punim0586/kbobowik/CCmetagen/CCMetagen/CCMetagen.py -i {input.resultFile} -o /scratch/punim0586/kat/101BPIndonesianSamplesCCMetagen_TE/{wildcards.sample} "
                "--depth_unit rpm " # depth is in reads per million
                "--mapstat {input.mapstatFile} " # if results are reported in reads per million, the mapstat file generated by KMA needs to be supplied
                "--depth 1) &> {log}" # filter out matches with less than one read per million
