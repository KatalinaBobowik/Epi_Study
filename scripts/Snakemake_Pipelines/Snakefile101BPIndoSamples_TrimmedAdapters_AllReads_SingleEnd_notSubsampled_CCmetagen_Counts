configfile: "config.yaml"

sample=config["samples"]

rule all:
	input:
		expand("/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.csv", sample=config["samples"]),
		expand("/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.html", sample=config["samples"]),
		expand("/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.tsv", sample=config["samples"])


rule CCMetagen_TE:
	input:
		resultFile="/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesKMA_SE/{sample}.res",
		mapstatFile="/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesKMA_SE/{sample}.mapstat"
	output:
		"/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.csv",
		"/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.html",
		"/data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{sample}.tsv"
	log:
		"/data/scratch/projects/punim0586/kat/101BPIndonesianSamples/logs/CCMetagen/{sample}.log"
	conda:
		"envs/CCMetagen.yaml"
	shell:
		"(export PATH='/home/kbobowik/.conda/envs/py38/bin:/usr/local/easybuild/software/Miniconda3/4.6.14/condabin:/usr/local/showq/0.15/bin:/usr/local/slurm/latest/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/ibutils/bin:/opt/puppetlabs/bin:/opt/dell/srvadmin/bin:/data/cephfs/punim0586/kbobowik/CCmetagen/CCMetagen:/scratch/punim0586/kat/dfam/hmmer-3.3/src:/home/kbobowik/edirect:/home/kbobowik/.local/bin:/home/kbobowik/bin:/data/cephfs/punim0586/kbobowik/CCmetagen/CCMetagen:/scratch/punim0586/kat/dfam/hmmer-3.3/src:/home/kbobowik/edirect:/home/kbobowik/.local/bin:/home/kbobowik/bin'; "
		"python /data/cephfs/punim0586/kbobowik/CCmetagen/CCMetagen/CCMetagen.py -i {input.resultFile} "
		"-o /data/scratch/projects/punim0586/kat/101BPIndonesianSamplesCCMetagen_SE_Counts/{wildcards.sample} " # get only accession number and taconomic ranks
		"--depth_unit rpm " # depth is in reads per million
		"--mapstat {input.mapstatFile} " # if results are reported in reads per million, the mapstat file generated by KMA needs to be supplied
		"--depth 1) &> {log}" # filter out matches with less than one read per million
